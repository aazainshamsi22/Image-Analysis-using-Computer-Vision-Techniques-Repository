# -*- coding: utf-8 -*-
"""Image Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15NtFVfsM9oONigsq2heovT4bkv10qiaE

# IMAGE ANALYSIS USING CV TECHNIQUES:

# Applying Opening and Closing

1. Rectangular Kernel
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the grayscale image
img = cv2.imread('p2.jpg', cv2.IMREAD_GRAYSCALE)

# Define the rectangular kernel
kernel = np.ones((5, 5), np.uint8)

# Apply opening
opening = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)

# Apply closing
closing = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)

plt.subplot(1, 2, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 1)
plt.imshow(opening, cmap='gray')
plt.title('Erosion Result')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(closing, cmap='gray')
plt.title('Dilation Result')
plt.axis('off')

"""2. Cross-Shaped Kernel"""

import cv2
import numpy as np

# Load the grayscale image
img = cv2.imread('images.jpg', cv2.IMREAD_GRAYSCALE)

# Define the cross-shaped kernel
kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (5, 5))

# Apply opening
opening = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)

# Apply closing
closing = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)

plt.subplot(1, 2, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 1)
plt.imshow(opening, cmap='gray')
plt.title('Erosion Result')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(closing, cmap='gray')
plt.title('Dilation Result')
plt.axis('off')

"""3. Elliptical Kernel"""

import cv2
import numpy as np

# Load the grayscale image
img = cv2.imread('p1.jpg', cv2.IMREAD_GRAYSCALE)

# Define the elliptical kernel
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))

# Apply opening
opening = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)

# Apply closing
closing = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)


plt.subplot(1, 2, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 1)
plt.imshow(opening, cmap='gray')
plt.title('Erosion Result')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(closing, cmap='gray')
plt.title('Dilation Result')
plt.axis('off')

"""4. Custom Kernel"""

import cv2
import numpy as np

# Load the grayscale image
img = cv2.imread('11.jpg', cv2.IMREAD_GRAYSCALE)

# Define the custom kernel
kernel = np.array([[0, 1, 0],
                   [0, 1, 0],
                   [0, 1, 0]], np.uint8)

# Apply opening
opening = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)

# Apply closing
closing = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)

plt.subplot(1, 2, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 1)
plt.imshow(opening, cmap='gray')
plt.title('Erosion Result')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(closing, cmap='gray')
plt.title('Dilation Result')
plt.axis('off')
plt.show()

"""# Applying Erosion and Dilation 

1. Rectangular Kernel
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the grayscale image
img = cv2.imread('girl.jpg', cv2.IMREAD_GRAYSCALE)

# Define the rectangular kernel
kernel = np.ones((5, 5), np.uint8)

# Apply erosion
erosion = cv2.erode(img, kernel, iterations=1)

# Apply dilation
dilation = cv2.dilate(img, kernel, iterations=1)

# Display the original 
plt.subplot(1, 2, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(erosion, cmap='gray')
plt.title('Erosion Result')
plt.axis('off')

plt.subplot(1, 2, 1)
plt.imshow(dilation, cmap='gray')
plt.title('Dilation Result')
plt.axis('off')
plt.show()

"""2. Cross-Shaped Kernel"""

import cv2
import numpy as np

# Load the grayscale image
img = cv2.imread('p7.jpg', cv2.IMREAD_GRAYSCALE)

# Define the cross-shaped kernel
kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (5, 5))

# Apply erosion
erosion = cv2.erode(img, kernel, iterations=1)

# Apply dilation
dilation = cv2.dilate(img, kernel, iterations=1)


# Display the original 
plt.subplot(1, 2, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(erosion, cmap='gray')
plt.title('Erosion Result')
plt.axis('off')

plt.subplot(1, 2, 1)
plt.imshow(dilation, cmap='gray')
plt.title('Dilation Result')
plt.axis('off')
plt.show()

"""3. Elliptical Kernel"""

import cv2
import numpy as np

# Load the grayscale image
img = cv2.imread('Thunivu.jpg', cv2.IMREAD_GRAYSCALE)

# Define the elliptical kernel
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))

# Apply erosion
erosion = cv2.erode(img, kernel, iterations=1)

# Apply dilation
dilation = cv2.dilate(img, kernel, iterations=1)

# Display the original 
plt.subplot(1, 2, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(erosion, cmap='gray')
plt.title('Erosion Result')
plt.axis('off')

plt.subplot(1, 2, 1)
plt.imshow(dilation, cmap='gray')
plt.title('Dilation Result')
plt.axis('off')
plt.show()

"""4. Custom Kernel"""

import cv2
import numpy as np

# Load the grayscale image
img = cv2.imread('p6.jpg', cv2.IMREAD_GRAYSCALE)

# Define the custom kernel
kernel = np.array([[0, 1, 0],
                   [0, 1, 0],
                   [0, 1, 0]], np.uint8)

# Apply erosion
erosion = cv2.erode(img, kernel, iterations=1)

# Apply dilation
dilation = cv2.dilate(img, kernel, iterations=1)

# Display the original 
plt.subplot(1, 2, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(erosion, cmap='gray')
plt.title('Erosion Result')
plt.axis('off')

plt.subplot(1, 2, 1)
plt.imshow(dilation, cmap='gray')
plt.title('Dilation Result')
plt.axis('off')
plt.show()

"""# Edge Detection and Object Mask """

import cv2
import numpy as np

# Load the grayscale image
img = cv2.imread('p3.jpg', cv2.IMREAD_GRAYSCALE)

# Define the kernel for erosion and dilation
kernel = np.ones((5, 5), np.uint8)

# Apply erosion to remove noise
erosion = cv2.erode(img, kernel, iterations=1)

# Apply dilation to highlight the edges
dilation = cv2.dilate(img, kernel, iterations=1)

# Subtract the eroded image from the dilated image to get the edges
edges = cv2.absdiff(dilation, erosion)

plt.subplot(1, 2, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(edges, cmap='gray')
plt.title('Edges Result')
plt.axis('off')
plt.show()

import cv2
import numpy as np

# Load the grayscale image
img = cv2.imread('p4.jpg', cv2.IMREAD_GRAYSCALE)

# Define the kernel for erosion and dilation
kernel = np.ones((5, 5), np.uint8)

# Apply erosion to remove noise
erosion = cv2.erode(img, kernel, iterations=1)

# Apply dilation to highlight the object
dilation = cv2.dilate(erosion, kernel, iterations=1)

# Create the object mask
mask = cv2.absdiff(dilation, img)

plt.subplot(1, 2, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(erosion, cmap='gray')
plt.title('Erosion Result')
plt.axis('off')
plt.show()

plt.subplot(1, 2, 1)
plt.imshow(dilation, cmap='gray')
plt.title('Dilation Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(mask, cmap='gray')
plt.title('Object Mask Result')
plt.axis('off')
plt.show()

"""# Remove background of object from image using that mask."""

import cv2
import numpy as np

# Load the original image and the mask
img = cv2.imread('p4.jpg')

# Apply the mask to the image
result = cv2.bitwise_and(img, img, mask = mask)

plt.subplot(1, 2, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 1)
plt.imshow(mask, cmap='gray')
plt.title('Mask')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(result, cmap='gray')
plt.title('Result')
plt.axis('off')
plt.show()